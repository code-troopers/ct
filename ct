#!/usr/bin/env bash
# Copyright 2014 Code-Troopers
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Github Project : https://github.com/code-troopers/ct
#
# Original algorithm come from
# http://superuser.com/questions/412284/pop-current-directory-until-specific-file-is-found

red='\x1B[0;31m';
green='\x1B[0;32m';
yellow='\x1B[0;33m';
NC='\x1B[0m'; # No Color
blueBold='\x1B[1;34m';
PORT_LIST=1500;

# Current call directory, loop var
curr=`pwd`
# Base call directory, to cd to it when the script ends
callDir=$curr
# Marker file for finding the project in the file hierarchy
file_name=.ctproject

banner(){
if [ -z "$CTNOBANNER" ]; then
echo '
````````````````````````````````````````````````````````````````````````````````````````````````````
`````````````````-/ossyyyyyyyso+:.``````````````````````````````````````````````````````````````````
``````````````-sddddddddddddddddddh+.```````````````````````````````````````````````````````````````
````````````.sdddo///////////////yddd+``````````````````````````````````````````````````````````````
```````````.hdddd-               +ddddo```````````````     Code-Troopers CLI helper    `````````````
```````````sdds..                `..ddd/``````````````         Copyright  2014         `````````````
``````````:dhho                     yhdh.`````````````          Code-Troopers          `````````````
``````````yd                          :d+`````````````     https://code-troopers.com   `````````````
`````````:dd  -yhyyyyyyh` -yyyyyyyyy  :dd.``````````````````````````````````````````````````````````
`````````ydd  -dddddy///  .///dddddd  :dd+``````````````````````````````````````````````````````````
````````-ddd  -dddddo         dddddd  :ddh``````````````````````````````````````````````````````````
````````/ddd  `.....`         ......  :ddd.`````````````````````````````````````````````````````````
````````ohhy                          :hhh:`````````````````````````````````````````````````````````
```````+o                                 h:````````````````````````````````````````````````````````
`````.ydo               yh+               hd+```````````````````````````````````````````````````````
`````sddo      `````````yho`````````      hdd/``````````````````````````````````````````````````````
`````sddo     -ddddddddd` :ddddddddd      hdd/``````````````````````````````````````````````````````
`````.ydo     `.........  `.........      hd+```````````````````````````````````````````````````````
```````/o...                          `...s-````````````````````````````````````````````````````````
````````.ydd                          :ddo``````````````````````````````````````````````````````````
`````````-dd            sy+           :dh```````````````````````````````````````````````````````````
``````````/d````````````dds```````````/h-```````````````````````````````````````````````````````````
```````````.ohdddddddddddddddddddddddy+.````````````````````````````````````````````````````````````
``````````````.://++//:-``.-://++//-.```````````````````````````````````````````````````````````````
````````````````````````````````````````````````````````````````````````````````````````````````````
';
fi
}


error(){
 echo -e ${red}$@
}

log(){
 if [ "true" == "$CTDEBUG" ]; then
    echo -e $@${NC}
 fi
}

help(){
 echo -e "${green}Default commands : ${NC}";
 echo -e "\t*${blueBold} ports ${NC} runs ${yellow}a server on http://localhost:1500 to see other used ports ${NC}"
 echo -e "\t*${blueBold} man {name} ${NC} runs ${yellow} awk on README.md to extract {name} section ${NC}"
 echo -e ""

 echo -e "${green}Declared aliases found in $@ : ${NC}";
 echo -en $(cat "$@" | grep -v "^#" | grep -v "^export" | grep -v 'CTNOBANNER' | sed -r "s/([^=]*)=([^#]*)#?(.*)/\\\t*\\${blueBold} \1\\${NC} runs \\${yellow}\2 \\${NC} \\${red} \3 \\${NC}\\\n/g" | tr -d '"' )
 echo -e ${NC};
}

printInformations() {
    ISHTTP=-1;
    read PID COMMAND PORTS <<< $1
    PORTS=${PORTS//\*/localhost}
    PORTS=${PORTS//localhost/127.0.0.1}
    for port in $PORTS
    do
        curl -m 5 -s http://$port > /dev/null
        ISHTTP=$?
        ISHTTPS="false"
        if [ "$ISHTTP" -gt "0" ]
        then
            curl -m 5 -s -k https://$port > /dev/null
            ISHTTP=$?
            ISHTTPS="true"
        fi
        if [ $ISHTTP -eq 0 ]
        then
            cwd=`lsof -p $PID -Ffn | grep fcwd -A 1 | grep ^n | awk '/^n/ { print substr($0, 2) }'`
            echo " { 'pid' : '$PID', 'address' : '$port', 'command' : '$COMMAND', 'cwd' : '$cwd', 'secure': $ISHTTPS},"
        fi;
    done
}

getHTTPListening() {
    LISTENING=`lsof -iTCP -sTCP:LISTEN -P -Fcn | awk '/^p[0-9]+/ {printf "\n"; printf substr($1, 2); printf " "} /^c.*/ { printf substr($1, 2); printf " "} /^n.*/ {printf substr($1,2); printf " ";}'`
    echo "["
    while read -r row; do
        printInformations "$row" &
    done< <(echo "$LISTENING")
    wait
    echo "null]"
}

#build a basic homepage with content from CDN for CSS/JS
getHomePage(){
    read -d '' CONTENT <<EOF
    <!DOCTYPE html>
    <html>
    <head>
    <title>CT port list</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.2.0/css/bootstrap.min.css" rel="stylesheet" media="screen">
    </head>
    <body>
    <h1 class="page-header">Listening ports <button id="refreshBtn" class="btn btn-primary pull-right">Refresh</button></h1>
    <div class="table-responsive">
    <table class="table table-striped">
    <thead>
    <tr>
    <th>#</th>
    <th>Working dir</th>
    <th>Command</th>
    <th>URI</th>
    </tr>
    </thead>
    <tbody id="content">

    </tbody>
    </table>
    </div>
    <footer class="text-center" role="contentinfo">
    <div class="container">
    <p>Made with <3 From Tours, France by <a href="http://www.code-troopers.com" target="_blank">Code-Troopers</a>.</p>
    <pre style="font-size:4px">$(banner)</pre>
    </div>
    </footer>
EOF
    read -d '' SCRIPTS <<"EOF"
    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="http://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.2.0/js/bootstrap.min.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/spin.js/2.0.1/spin.min.js"></script>
    <script>
    $(document).ready(function(){
        var $content = $("#content");
        var spinner = new Spinner().spin();
        var scan = function(){
            document.body.appendChild(spinner.el);
            $.get('/scan').then(function(data){
                $content.empty();
                var json = JSON.parse(data.replace(/'/g, '"'));
                for (var i in json){
                    if (null === json[i]) continue;
                    var relativeAddr = json[i].address.replace('127\.0\.0\.1', window.location.hostname);
                    $content.append("<tr>"+
                    "<td>"+json[i].pid+"</td>"+
                    "<td>"+json[i].cwd+"</td>"+
                    "<td>"+json[i].command+"</td>"+
                    "<td><a href='http"+(json[i].secure?"s":"")+"://"+relativeAddr+"'>"+relativeAddr+"</a></td>"+
                    "</tr>");
                }
                document.body.removeChild(spinner.el);
            });
        }
        scan();
        $("#refreshBtn").click(scan);
    });
    </script>
    </body>
    </html>
EOF

    echo -e "HTTP/1.1 200 OK\r"
    echo "Content-type: text/html"
    echo

    echo "$CONTENT$SCRIPTS"
}

extractFromReadme() {
    result=$(awk "{IGNORECASE=1} /# $1/{copy=1;next} /#/{copy=0;next} copy" README.md )
    if [ -z "$result" ]
    then
        echo -e "\t${red}no man found"
    else
        echo "${result}"
    fi
}

# respond to / request by sending a basic html file with inline javascript that calls /apps
# respond to /scan request with the formatted list of url (with port) detected location on disk (guesstimate) and pid
handleRequest() {
    case "$REQUEST" in
        "/") getHomePage
        ;;
        "/scan") getHTTPListening
        ;;
        *) echo 'Not Found';
        ;;
    esac
}

startServer() {
    #http://stackoverflow.com/questions/16640054/minimal-web-server-using-netcat
    rm -f /tmp/ct_ports_out
    mkfifo /tmp/ct_ports_out
    trap "rm -f /tmp/ct_ports_out" EXIT
    # detect if we have a netcat-traditional or netcat-openbsd
    if nc -q 2>&1 | grep -q "requires an argument";
        then CMD_ARGS="-q 0 -l -p ${PORT_LIST}";
        else CMD_ARGS="-l ${PORT_LIST}";
    fi;
    while true
    do
        cat /tmp/ct_ports_out | nc ${CMD_ARGS} > >( # parse the netcat output, to build the answer redirected to the pipe "out".
        export REQUEST=
        while read line
        do
            line=$(echo "$line" | tr -d '[\r\n]')

            if echo "$line" | grep -qE '^GET /' # if line starts with "GET /"
                then
                REQUEST=$(echo "$line" | cut -d ' ' -f2) # extract the request
            elif [ "x$line" = x ] # empty line / end of request
                then
                log "$REQUEST"
                handleRequest > /tmp/ct_ports_out
            fi
        done
        )
    done
}

launchports () {
    echo -e "${green}Starting port listing server on http://localhost:${PORT_LIST} (CTRL+C to abort)${NC}"
    startServer;
}

while [ "$curr" != "/" ]; do
  file="$curr/$file_name"
  if [ -f "$file" ]; then
        cd "$curr" > /dev/null;
        if [ `uname -o` = "Cygwin" ]
    then
        dos2unix $file 2> /dev/null;
    fi;
    source "$file"
    banner; # we give a chance to export the ignore banner in the project file
    ALIAS=$(cat $file | cut -d'=' -f 1 | grep "$1")
    if [ -z "$ALIAS" ]; then
        case "$1" in
            "help")
                help $file;
                exit;
                ;;
            "ports")
                launchports;
                exit;
                ;;
            "links")
                $0 man Links;
                exit;
                ;;
            "man")
                shift
                extractFromReadme $1;
                exit;
                ;;
            *)
                log "${red}Can't find aliased command, running bare command";
                cd "$callDir" > /dev/null
                "$@";
                ;;
        esac
    else
        if [ -z "$@" ]; then
            help $file;
        else
            cd "$callDir" > /dev/null
            log "${green}We will run '$@' in '$(pwd)'";
            eval "eval \"\$$@\"";
        fi
    fi
    # Go back to the base directory, null out output if CDPATH exists
    cd "$callDir" > /dev/null
    exit
  fi
  curr="`dirname \"$curr\"`"
done
banner;
error "I don't know where I am at, I can't find any project ($file_name) in the parent directories of your shell. ${NC}\nYou need to create a $file_name file at the root of your project with a content similar to the following.\n${yellow}Please note that your usual shell aliases are not interpolated in the commands you specify in your project file\nand that you need to quote commands if they contain spaces.${NC}";
echo "
$file_name example :

    run='mvn clean install jetty:run'
    dbg='mvnDebug clean install jetty:run'
    test='mvn test'
"
